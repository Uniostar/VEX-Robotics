{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor LeftDriveSmart = motor(PORT11, ratio18_1, false);\nmotor RightDriveSmart = motor(PORT12, ratio18_1, true);\ninertial DrivetrainInertial = inertial(PORT15);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainInertial, 319.19, 320, 40, mm, 0.7142857142857143);\n\ndigital_out Wings = digital_out(Brain.ThreeWirePort.A);\ndigital_out Intake_Piston = digital_out(Brain.ThreeWirePort.B);\nmotor Intake = motor(PORT13, ratio6_1, false);\n\nmotor Launch = motor(PORT14, ratio36_1, false);\n\n/*vex-vision-config:begin*/\nvision::signature Vision4__GREEN_TRIBALL = vision::signature (1, -4525, 1, -2262,-4157, 1, -2078,0.9, 0);\nvision::signature Vision4__BLUE_TRIBALL = vision::signature (2, -2945, -169, -1557,1351, 10103, 5727,0.7, 0);\nvision::signature Vision4__RED_TRIBAL = vision::signature (3, 3247, 9907, 6576,-841, 153, -344,1.1, 0);\nvision Vision4 = vision (PORT4, 50, Vision4__GREEN_TRIBALL, Vision4__BLUE_TRIBALL, Vision4__RED_TRIBAL);\n/*vex-vision-config:end*/\ndigital_out Barrier_piston = digital_out(Brain.ThreeWirePort.C);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\nbool vexcode_initial_drivetrain_calibration_completed = false;\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  DrivetrainInertial.calibrate();\n  while (DrivetrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n  vexcode_initial_drivetrain_calibration_completed = true;\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\nvoid vexcodeInit() {\n\n  // Calibrate the Drivetrain\n  calibrateDrivetrain();\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1RightShoulderControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // stop the motors if the brain is calibrating\n      if (DrivetrainInertial.isCalibrating()) {\n        LeftDriveSmart.stop();\n        RightDriveSmart.stop();\n        while (DrivetrainInertial.isCalibrating()) {\n          wait(25, msec);\n        }\n      }\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis1\n      // right = Axis3 - Axis1\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonR1/ButtonR2 status to control Intake\n      if (Controller1.ButtonR1.pressing()) {\n        Intake.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        Intake.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        Intake.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {Aryan K}                                                 */\n/*    Created:      {6/1/23}                                                  */\n/*    Description:  Simple Movement Code for Armus Fortis                     */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition = competition();\n\nvoid setup()\n{ \n  DrivetrainInertial.calibrate();\n\n  Intake.setVelocity(100, percent);\n  Intake.setStopping(coast);\n  \n  Launch.setMaxTorque(100, percent);\n  Launch.setVelocity(100, percent);\n  Launch.setStopping(coast);\n\n  Drivetrain.setDriveVelocity(100, percent);\n  Drivetrain.setStopping(brake);\n  Drivetrain.setTurnVelocity(100, percent);\n\n  Intake_Piston.set(true);\n}\n\nvoid openIntake()\n{\n  Intake_Piston.set(true);\n}\n\nvoid closeIntake()\n{\n  Intake_Piston.set(false);\n}\n\nvoid onOpenWings()\n{\n  Wings.set(true);\n}\n\nvoid onCloseWings()\n{\n  Wings.set(false);\n}\n\nvoid windCatapult()\n{\n  Launch.spin(reverse);\n}\n\nvoid stopCatapult()\n{\n  Launch.stop();\n}\n\nvoid driverControl()\n{\n  Controller1.ButtonL1.pressed(onOpenWings);\n  Controller1.ButtonL2.pressed(onCloseWings);\n\n  Controller1.ButtonR1.pressed(openIntake);\n  Controller1.ButtonR2.pressed(closeIntake);\n\n  Controller1.ButtonX.pressed(windCatapult);\n  Controller1.ButtonX.released(stopCatapult);\n}\n\nvoid autonomousPeriod()\n{\n  Vision4.takeSnapshot(Vision4__GREEN_TRIBALL);\n  vex::timer Timer = vex::timer();\n  Timer.clear();\n  float currentTime = Timer.time(vex::timeUnits::sec);\n  while(currentTime <= 15){\n    if(Vision4.largestObject.exists){\n      if(Vision4.largestObject.centerX > 60){\n        Drivetrain.turn(right);\n      }\n      if(Vision4.largestObject.centerX < 60){\n        Drivetrain.turn(left);\n      }\n      if(Vision4.largestObject.centerX > 60 && Vision4.largestObject.centerX < 60){\n        if(Vision4.largestObject.width <200){\n          Drivetrain.drive(forward);\n          if(Vision4.largestObject.width <150){\n            //turn on the claw\n          }\n        } else {\n          //make robot score\n        \n        }\n      }\n    } else {\n      // mke it turn until it detects its\n      while(!Vision4.largestObject.exists){\n        Drivetrain.turn(right);\n      }\n    }\n  } \n}\n\nint main()\n{\n  //Setup Variables Before Program Starts\n  setup();\n\n  Competition.drivercontrol(driverControl);\n  Competition.autonomous(autonomousPeriod);\n}","textLanguage":"cpp","robotConfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"Intake","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22},{"port":[11,12,15],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"5:7","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[1],"name":"Wings","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[2],"name":"Intake_Piston","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[13],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[14],"name":"Launch","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[4],"name":"Vision4","customName":false,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"GREEN_TRIBALL\",\"parameters\":{\"uMin\":-4525,\"uMax\":1,\"uMean\":-2262,\"vMin\":-4157,\"vMax\":1,\"vMean\":-2078,\"rgb\":4082499.631614654,\"type\":0,\"name\":\"GREEN_TRIBALL\"},\"range\":0.9},{\"name\":\"BLUE_TRIBALL\",\"parameters\":{\"uMin\":-2945,\"uMax\":-169,\"uMean\":-1557,\"vMin\":1351,\"vMax\":10103,\"vMean\":5727,\"rgb\":2501699.7335164836,\"type\":0,\"name\":\"BLUE_TRIBALL\"},\"range\":0.7},{\"name\":\"RED_TRIBAL\",\"parameters\":{\"uMin\":3247,\"uMax\":9907,\"uMean\":6576,\"vMin\":-841,\"vMax\":153,\"vMean\":-344,\"rgb\":6175033,\"type\":0,\"name\":\"RED_TRIBAL\"},\"range\":1.1},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22},{"port":[3],"name":"Barrier_piston","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}